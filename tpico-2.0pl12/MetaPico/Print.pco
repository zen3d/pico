`*-----------------------------------*`
`*           >>>Pico 2.0<<<          *`
`*            Theo D'Hondt           *`
`*  VUB Programming Technology Lab   *`
`*               ©2002               *`
`*-----------------------------------*`
`*              printer              *`
`*      (METACIRCULAR VERSION)       *`
`*-----------------------------------*`

{ Print(Exp):
    { print_expression(Exp):
        void;

      print_name(Msg, Nam)::
        display("<", Msg, " ", Nam[TXT_VAL], ">");

      print_list(Lst, Ini, Sep, Trm)::
        { lst: Lst[TAB_TAB];
          display(Ini);
          if(size(lst) > 0,
            { print_expression(lst[1]);
              for(k: 2, k <= size(lst), k:= k+1,
                { display(Sep); 
                  print_expression(lst[k]) }) });
          display(Trm) };

      print_void(Voi)::
        display("<void>");
      
      print_reference(Ref):: 
        { nam: Ref[REF_NAM];
          display(nam[TXT_VAL]) };
            
      print_application(Apl):: 
        { exp: Apl[APL_EXP];
          arg: Apl[APL_ARG];
          print_expression(exp);
          if(is_TAB(arg),
            print_list(arg, "(", ",", ")"),                    
            { display("@");
              print_expression(arg) }) };
            
      print_tabulation(Tbl):: 
        { exp: Tbl[TBL_EXP];
          idx: Tbl[TBL_IDX];
          print_expression(exp);
          print_list(idx, "[", ",", "]") };
            
      print_qualification(Qua):: 
        { exp: Qua[QUA_EXP];
          inv: Qua[QUA_INV];
          print_expression(exp);
          display(".");
          print_expression(inv) };
            
      print_definition(Def):: 
        { inv: Def[DEF_INV];
          exp: Def[DEF_EXP];
          print_expression(inv);
          display(":");
          print_expression(exp) };
            
      print_declaration(Dcl):: 
        { inv: Dcl[DCL_INV];
          exp: Dcl[DCL_EXP];
          print_expression(inv);
          display("::");
          print_expression(exp) };
            
      print_assignment(Set):: 
        { inv: Set[SET_INV];
          exp: Set[SET_EXP];
          print_expression(inv);
          display(":=");
          print_expression(exp) };
           
      print_dictionary(Dct):: 
        display("<dictionary>");
            
      print_continuation(Cnt):: 
        display("<continuation>");
            
      print_function(Fun)::
        { nam: Fun[FUN_NAM];
          print_name("function", nam) };

      print_native(Nat)::
        { nam: Nat[NAT_NAM];
          print_name("native function", nam) };

      print_table(Tab)::
        display("<table>");

      print_text(Txt)::
        { val: Txt[TXT_VAL];
          display(val) };

      print_fraction(Frc)::
        { val: Frc[FRC_VAL];
          display(val) };

      print_quotation(Quo)::
        { exp: Quo[QUO_EXP];
          display("'");
          print_expression(exp) };

      print_number(Nbr)::
        { val: Nbr[NBR_VAL];
          display(val) };

      print_error(Exp)::
        Error("abstract grammar violation");

      exp_case: case(VOI_tag # print_void,
                     REF_tag # print_reference,
                     APL_tag # print_application,
                     TBL_tag # print_tabulation,
                     QUA_tag # print_qualification,
                     DEF_tag # print_definition,
                     DCL_tag # print_declaration,
                     SET_tag # print_assignment,
                     CST_tag # print_dictionary,
                     VAR_tag # print_dictionary,
                     CNT_tag # print_continuation,
                     NAT_tag # print_native,
                     FUN_tag # print_function,
                     TAB_tag # print_table,
                     TXT_tag # print_text,
                     FRC_tag # print_fraction,
                     QUO_tag # print_quotation,
                     NBR_tag # print_number,
                        void # print_error);
      
      print_expression(Exp):=
        { tag: TAG(Exp);
          cas: exp_case(tag);
          cas(Exp) };
      
      Print(Exp):=
        print_expression(Exp);
      
      Print(Exp) };

  display("printer ...... installed", eoln) }